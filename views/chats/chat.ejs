<head>
    <!-- link -->
    <link rel="stylesheet" href="../../css/chatting.css">
    <!-- google font icon -->
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0&icon_names=videocam" />
</head>

<body>
    <div class="main">
        <!-- Top name  -->
        <div class="name" data-user-id="<%= receiver._id %>">
            <!-- Arrow for back to the page -->
            <a href="/match"> <span> <i class="fa-solid fa-arrow-left"></i></span></a>
            <div onclick="showProfile()" class="image w-[40px] h-[40px] rounded-full overflow-hidden mr-2">
                <!-- image of the user -->
                <img src="<%= receiver.profileImage %>" alt="Shati.image" class="w-full h-full object-cover">
            </div>
            <!-- Receiver name -->
            <div class="d-flex flex-col">
                <p>
                    <%= receiver.name %>
                </p>
                <div class="online-status" id="user-<%= receiver._id %>">
                    <!-- Status will be updated here via Socket.IO -->
                    <%= receiver.isOnline ? 'Online' : `Last seen: ` %>
                </div>

            </div>
            <!-- Div for the calling icons -->
            <div class="right absolute right-10 d-flex  items-center">
                <!-- Video calling icon -->
                <span id="video-call-icon"
                    class="material-symbols-outlined fs-6 p-3 bg-white rounded-circle cursor-pointer">
                    videocam
                </span>
                <!-- Normal calling icon -->
                <i class="fa-solid fa-phone fs-6 text-primary p-3 bg-white rounded-circle"></i>
            </div>
        </div>
        <!-- Message container -->
        <ul class="message-container" id="messages">
            <li class="message-left">
                <p class="messages">
                    <span></span>
                </p>
            </li>
            <!-- Message  right -->
            <li class="message-right">
                <p class="messages bg-info-subtle text-info-emphasis">
                    <span></span>
                </p>
            </li>
        </ul>
        <!-- Send message -->
        <form class="message-form" id="message-form">
            <input type="text" name="message" id="message-input" class="message-input"
                placeholder="Type a Message......">
            <div class="v-divider"></div>
            <!-- Button -->
            <button id="send-button" type="submit" class="send-button">Send <span> <i class="fas fa-paper-plane"></i>
                </span></button>
        </form>

        <!-- Video Call Modal -->
        <div id="video-call-modal" class="video-call-modal ">
            <div class="modal-content">
                <h3>Video Call with <%= receiver.name %>
                </h3>
                <video id="local-video" class="local-video" autoplay muted></video>
                <video id="remote-video" class="remote-video" autoplay></video>
                <div class="call-buttons">
                    <button id="accept-call" class="accept-call">Accept</button>
                    <button id="decline-call" class="decline-call">Decline</button>
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        function showProfile() {
            // Show profile on another page 
            window.location.href = "/shathiProfile/<%= receiver._id %> ";
        }
        // sockets works start from here
        const socket = io({
            query: { userId: '<%= sender._id %>' }
        });
        // Get user and recipient IDs dynamically (replace with actual logic)
        const userId = '<%= sender._id %>';
        const recipientId = '<%= receiver._id %>';
        console.log(userId, recipientId);

        // Listen for user status updates
        socket.on('userStatus', (data) => {
            const { userId, isOnline, lastSeen } = data;
            const userElement = document.getElementById(`user-${userId}`); // Use dynamic IDs for user elements

            if (isOnline) {
                userElement.innerHTML = 'Online';
            } else if (lastSeen) {
                const date = new Date(lastSeen);

                const options = { day: '2-digit', month: 'short', hour: '2-digit', minute: '2-digit', hour12: false };
                const formattedLastSeen = new Intl.DateTimeFormat('en-GB', options).format(date);
                userElement.textContent = `Last seen: ${formattedLastSeen}`;
            }
        });
        // Join the private room
        socket.emit('joinRoom', { userId, recipientId });
        // Fetch and display chat history when the page loads
        function loadChatHistory() {
            fetch(`/chat/private/${recipientId}/history`)
                .then(response => response.json())
                .then(messages => {
                    // console.log(JSON.stringify(messages));
                    const messagesContainer = document.getElementById('messages');
                    console.log('xx', messagesContainer);
                    messagesContainer.innerHTML = ''; // Clear the container before appending messages
                    messages.forEach(({ senderId, message, timestamp }) => {
                        const li = document.createElement('li');
                        li.classList.add(senderId === userId ? 'message-right' : 'message-left');
                        li.innerHTML = `
                    <p class="message">
                        ${message}
                        <span>
                            ${new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                        </span>
                    </p>
                `;
                        messagesContainer.appendChild(li);
                    });
                    // Scroll to the latest message
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                })
                .catch(error => console.error('Error fetching chat history:', error));
        }
        loadChatHistory();
        // Send a private message
        const input = document.getElementById('message-input');
        const button = document.getElementById('send-button');
        const messages = document.getElementById('messages');

        // Click on the send button
        button.addEventListener('click', (e) => {
            e.preventDefault();
            const message = input.value.trim();
            if (message) {
                socket.emit('privateMessage', { userId, recipientId, message });
                input.value = '';
            }
        });

        // Receive private messages
        socket.on('privateMessage', ({ senderId, message }) => {
            const li = document.createElement('li');
            li.classList.add(senderId === userId ? 'message-right' : 'message-left');
            // Adding the message ro rgw
            li.innerHTML = `
        <p class="message">
        ${message}
            <span class="text-[2px]">
                <%= new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) %>
            </span>
        </p>    `;
            messages.appendChild(li);

            // Scroll to the latest message
            messages.scrollTo({ top: messages.scrollHeight, behavior: 'smooth' });
        });


        // Video call button click
        document.getElementById('video-call-icon').addEventListener('click', function () {
            const receiverId = document.querySelector('.name').getAttribute('data-user-id');
            socket.emit('video-call-request', receiverId); // Emit request to server
        });

        // Listen for incoming video call requests
        socket.on('incoming-video-call', function (data) {
            const receiverName = data.receiverName;
            // Display video call modal to user
            document.getElementById('video-call-modal').classList.remove('hidden');
        });

        // Accept call
        document.getElementById('accept-call').addEventListener('click', function () {
            // Set up WebRTC connection to accept the call
            // Implement WebRTC connection logic here

            document.getElementById('video-call-modal').classList.add('hidden');
        });

        // Decline call
        document.getElementById('decline-call').addEventListener('click', function () {
            document.getElementById('video-call-modal').classList.add('hidden');
        });

        // Handle video call WebRTC
        const localVideo = document.getElementById('local-video');
        const remoteVideo = document.getElementById('remote-video');

        let localStream;
        let peerConnection;
        const iceServers = {
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' }, // Example STUN server
            ],
        };

        // Start video call setup
        navigator.mediaDevices.getUserMedia({ video: true, audio: true })
            .then(stream => {
                localVideo.srcObject = stream;
                localStream = stream;
            })
            .catch(error => {
                console.error('Error accessing media devices.', error);
            });

        // Implement signaling logic with socket.emit for offer, answer, and ICE candidates




    </script>
</body>